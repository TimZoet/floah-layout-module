#pragma once

////////////////////////////////////////////////////////////////
// Standard includes.
////////////////////////////////////////////////////////////////

#include <memory>

////////////////////////////////////////////////////////////////
// External includes.
////////////////////////////////////////////////////////////////

#include "uuid.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "floah-layout/block.h"
#include "floah-layout/properties/margin.h"
#include "floah-layout/properties/size.h"

namespace floah
{
    class Layout;
    class LayoutElement;

    using LayoutElementPtr = std::unique_ptr<LayoutElement>;
    using LayoutPtr        = std::unique_ptr<Layout>;

    class LayoutElement
    {
        friend class Layout;

    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        LayoutElement();

        LayoutElement(const LayoutElement&);

        LayoutElement(LayoutElement&&) noexcept = delete;

        virtual ~LayoutElement() noexcept;

        LayoutElement& operator=(const LayoutElement&);

        LayoutElement& operator=(LayoutElement&&) noexcept = delete;

        /**
         * \brief Clone this element to a new layout and/or parent element.
         * \param l New layout to place element in.
         * \param p Parent element.
         * \return Cloned element.
         */
        [[nodiscard]] virtual LayoutElementPtr clone(Layout* l, LayoutElement* p) const;

    protected:
        virtual void cloneImpl(Layout* l, LayoutElement* p);

    public:
        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] const uuids::uuid& getId() const noexcept;

        [[nodiscard]] Layout* getLayout() const noexcept;

        [[nodiscard]] LayoutElement* getParent() const noexcept;

        [[nodiscard]] Size& getSize() noexcept;

        [[nodiscard]] const Size& getSize() const noexcept;

        [[nodiscard]] Margin& getInnerMargin() noexcept;

        [[nodiscard]] const Margin& getInnerMargin() const noexcept;

        [[nodiscard]] Margin& getOuterMargin() noexcept;

        [[nodiscard]] const Margin& getOuterMargin() const noexcept;

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

    protected:
        /**
         * \brief Recursively set layout.
         * \param l Layout.
         */
        virtual void setLayout(Layout* l) noexcept;

        void setLayout(Layout* l, LayoutElement& elem) noexcept;

        /**
         * \brief Make other element a child of this element.
         * \param elem Other element.
         */
        void makeChild(LayoutElement& elem);

        /**
         * \brief Remove this element as parent of other element.
         * \param elem Other element.
         */
        void removeChild(LayoutElement& elem);

    public:
        ////////////////////////////////////////////////////////////////
        // Generate.
        ////////////////////////////////////////////////////////////////

        /**
         * \brief Count the total number of blocks generated by this element and all its children.
         * \param count Count.
         */
        virtual void countBlocks(size_t& count) const noexcept;

        /**
         * \brief Generate all blocks for this element and all its children.
         * \param blocks List of blocks to append new blocks to.
         * \param block Block for this element. Identifier and bounds are already filled in.
         */
        virtual void generate(std::vector<Block>& blocks, Block& block) const;

    protected:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////

        uuids::uuid id;

        Layout* layout = nullptr;

        LayoutElement* parent = nullptr;

        Size size;

        Margin innerMargin;

        Margin outerMargin;
    };
}  // namespace floah
